/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package gui;

import dao.AlunoDAO;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import modelo.Aluno;
import modelo.Curso;
import dao.CursoDAO;
import java.util.List;

/**
 *
 * @author CELSO
 */
public class JanelaAluno extends javax.swing.JFrame {

    // Variável para guardar a lista de cursos (atualize quando abrir a janela ou cadastrar/excluir curso)
    private java.util.List<Curso> listaCursos;

    // Variável para saber qual aluno está sendo editado (null se for novo)
    private Integer idAlunoEditando = null;

    /**
     * Creates new form JanelaAluno
     */
    public JanelaAluno() {
        initComponents();
        preencherComboCursos();
        atualizarTabela();
    }

    private void preencherComboCursos() {
        cbCurso.removeAllItems(); // Limpa o ComboBox antes de adicionar
        listaCursos = new CursoDAO().getLista(); // Busca todos os cursos do banco
        for (Curso c : listaCursos) {
            cbCurso.addItem(c.getNome()); // Adiciona só o nome no ComboBox
        }
    }

    private void limparCampos() {
        txtNome.setText("");
        txtCpf.setText("");
        txtEmail.setText("");
        txtDataNascimento.setText("");
        chkAtivo.setSelected(true); // ou false, se preferir desmarcado ao limpar
        cbCurso.setSelectedIndex(0); // seleciona o primeiro curso da lista
        idAlunoEditando = null; // reseta a variável de edição
        tblAlunos.clearSelection(); // desmarca qualquer seleção na tabela
    }

    public void atualizarTabela() {
        // Garante que está usando o modelo correto
        DefaultTableModel model = (DefaultTableModel) tblAlunos.getModel();
        model.setRowCount(0); // Limpa todas as linhas

        AlunoDAO alunoDAO = new AlunoDAO();
        for (Aluno a : alunoDAO.getLista()) {
            // Pega o nome do curso do objeto Curso já preenchido
            String nomeCurso = "";
            if (a.getCurso() != null && a.getCurso().getNome() != null) {
                nomeCurso = a.getCurso().getNome();
            }
            // Formata data
            String dataNasc = "";
            if (a.getDataNascimento() != null) {
                dataNasc = a.getDataNascimento().format(java.time.format.DateTimeFormatter.ofPattern("dd/MM/yyyy"));
            }

            // Adiciona linha na tabela
            model.addRow(new Object[]{
                a.getId(),
                a.getNome(),
                a.getCpf(),
                a.getEmail(),
                dataNasc,
                nomeCurso,
                a.isAtivo() ? "Sim" : "Não"
            });
        }

    }

    private void atualizarTabelaComLista(List<Aluno> lista) {
        DefaultTableModel model = (DefaultTableModel) tblAlunos.getModel();
        model.setRowCount(0);
        for (Aluno a : lista) {
            model.addRow(new Object[]{
                a.getId(),
                a.getNome(),
                a.getCpf(),
                a.getEmail(),
                a.getDataNascimento().format(DateTimeFormatter.ofPattern("dd/MM/yyyy")),
                a.getCurso().getNome(),
                a.isAtivo() ? "Sim" : "Não"
            });
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton6 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        bntSalvar = new javax.swing.JButton();
        bntExcluir = new javax.swing.JButton();
        bntEditar = new javax.swing.JButton();
        bntLimpar = new javax.swing.JButton();
        bntReativar = new javax.swing.JButton();
        bntInativar = new javax.swing.JButton();
        chkAtivo = new javax.swing.JCheckBox();
        cbCurso = new javax.swing.JComboBox<>();
        txtNome = new javax.swing.JTextField();
        txtCpf = new javax.swing.JTextField();
        txtEmail = new javax.swing.JTextField();
        txtDataNascimento = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblAlunos = new javax.swing.JTable();
        txtConsultaAluno = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        bntConsultarAluno = new javax.swing.JButton();

        jButton6.setText("jButton6");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setText("Nome");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 6, 37, -1));

        jLabel2.setText("Cpf");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 34, 37, -1));

        jLabel3.setText("email");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 62, 37, -1));

        jLabel4.setText("Data NAsc");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 90, 60, -1));

        bntSalvar.setText("Salvar");
        bntSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bntSalvarActionPerformed(evt);
            }
        });
        getContentPane().add(bntSalvar, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 220, -1, -1));

        bntExcluir.setText("Excluir");
        bntExcluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bntExcluirActionPerformed(evt);
            }
        });
        getContentPane().add(bntExcluir, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 260, -1, -1));

        bntEditar.setText("Editar");
        bntEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bntEditarActionPerformed(evt);
            }
        });
        getContentPane().add(bntEditar, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 220, -1, -1));

        bntLimpar.setText("Limpar");
        bntLimpar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bntLimparActionPerformed(evt);
            }
        });
        getContentPane().add(bntLimpar, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 260, -1, -1));

        bntReativar.setText("Reativar");
        bntReativar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bntReativarActionPerformed(evt);
            }
        });
        getContentPane().add(bntReativar, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 300, -1, -1));

        bntInativar.setText("Inativar");
        bntInativar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bntInativarActionPerformed(evt);
            }
        });
        getContentPane().add(bntInativar, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 300, -1, -1));

        chkAtivo.setText("ativo");
        getContentPane().add(chkAtivo, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 160, -1, -1));

        cbCurso.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        getContentPane().add(cbCurso, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 120, -1, -1));

        txtNome.setText("jTextField1");
        getContentPane().add(txtNome, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 0, -1, -1));

        txtCpf.setText("jTextField2");
        getContentPane().add(txtCpf, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 30, -1, -1));

        txtEmail.setText("jTextField3");
        getContentPane().add(txtEmail, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 60, -1, -1));

        txtDataNascimento.setText("jTextField4");
        getContentPane().add(txtDataNascimento, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 90, -1, -1));

        tblAlunos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id", "Nome", "Cpf", "email", "data nasc", "curso", "ativo"
            }
        ));
        jScrollPane1.setViewportView(tblAlunos);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 20, 280, 180));

        txtConsultaAluno.setText("NomeAluno");
        txtConsultaAluno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtConsultaAlunoActionPerformed(evt);
            }
        });
        getContentPane().add(txtConsultaAluno, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 210, -1, -1));

        jLabel5.setText("Busca");
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 210, -1, -1));

        bntConsultarAluno.setText("buscar");
        bntConsultarAluno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bntConsultarAlunoActionPerformed(evt);
            }
        });
        getContentPane().add(bntConsultarAluno, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 210, -1, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void bntSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bntSalvarActionPerformed
        // TODO add your handling code here:
        try {
            // 1. Pegue os dados dos campos
            String nome = txtNome.getText().trim();
            String cpf = txtCpf.getText().trim();
            String email = txtEmail.getText().trim();
            String dataNascStr = txtDataNascimento.getText().trim();
            boolean ativo = chkAtivo.isSelected();

            // 2. Obtenha o curso selecionado
            int indiceSelecionado = cbCurso.getSelectedIndex();
            if (indiceSelecionado == -1) {
                JOptionPane.showMessageDialog(this, "Selecione um curso!");
                return;
            }
            Curso cursoSelecionado = listaCursos.get(indiceSelecionado);

            // *** NOVO: Verifica se o curso está inativo ***
            if (!cursoSelecionado.isAtivo()) {
                JOptionPane.showMessageDialog(this, "Não é possível cadastrar alunos em cursos inativos!");
                return;
            }

            // 3. Validação simples
            if (nome.isEmpty() || cpf.isEmpty() || email.isEmpty() || dataNascStr.isEmpty() || cursoSelecionado == null) {
                JOptionPane.showMessageDialog(this, "Preencha todos os campos!");
                return;
            }

            // 4. Converter data
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/yyyy");
            LocalDate dataNasc = LocalDate.parse(dataNascStr, formatter);

            // 5. Montar objeto Aluno
            Aluno aluno = new Aluno();
            aluno.setNome(nome);
            aluno.setCpf(cpf);
            aluno.setEmail(email);
            aluno.setDataNascimento(dataNasc);
            aluno.setAtivo(ativo);
            aluno.setCurso(cursoSelecionado);

            AlunoDAO alunoDAO = new AlunoDAO();

            if (idAlunoEditando == null) {
                // Cadastro novo
                alunoDAO.adiciona(aluno);
                JOptionPane.showMessageDialog(this, "Aluno cadastrado com sucesso!");
            } else {
                // Edição
                aluno.setId(idAlunoEditando);
                alunoDAO.altera(aluno); // Você precisa criar esse método no AlunoDAO!
                JOptionPane.showMessageDialog(this, "Aluno alterado com sucesso!");
                idAlunoEditando = null; // Reseta para novo cadastro
            }

            limparCampos();
            atualizarTabela();

        } catch (Exception ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "Erro ao salvar: " + ex.getMessage());
        }
    }//GEN-LAST:event_bntSalvarActionPerformed

    private void bntEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bntEditarActionPerformed
        // TODO add your handling code here:
        // Verifica se alguma linha está selecionada
        int linhaSelecionada = tblAlunos.getSelectedRow();
        if (linhaSelecionada != -1) {
            // Pega o ID do aluno na primeira coluna da linha selecionada
            int idAluno = (int) tblAlunos.getValueAt(linhaSelecionada, 0);

            // Busca o aluno no banco
            AlunoDAO alunoDAO = new AlunoDAO();
            Aluno aluno = alunoDAO.buscaPorId(idAluno);

            if (aluno != null) {
                // Preenche os campos do formulário
                txtNome.setText(aluno.getNome());
                txtCpf.setText(aluno.getCpf());
                txtEmail.setText(aluno.getEmail());
                // Formata a data para o campo
                java.time.format.DateTimeFormatter formatter = java.time.format.DateTimeFormatter.ofPattern("dd/MM/yyyy");
                txtDataNascimento.setText(aluno.getDataNascimento().format(formatter));
                chkAtivo.setSelected(aluno.isAtivo());

                // Seleciona o curso correto no ComboBox
                for (int i = 0; i < listaCursos.size(); i++) {
                    if (listaCursos.get(i).getId() == aluno.getCurso().getId()) {
                        cbCurso.setSelectedIndex(i);
                        break;
                    }
                }

                // Marca que está editando este aluno
                idAlunoEditando = aluno.getId();
            } else {
                JOptionPane.showMessageDialog(this, "Aluno não encontrado.");
            }
        } else {
            JOptionPane.showMessageDialog(this, "Selecione um aluno na tabela para editar.");
        }
    }//GEN-LAST:event_bntEditarActionPerformed

    private void bntExcluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bntExcluirActionPerformed
        // TODO add your handling code here:
        // Verifica se alguma linha está selecionada na tabela
        int linhaSelecionada = tblAlunos.getSelectedRow();
        if (linhaSelecionada != -1) {
            // Pega o ID do aluno na primeira coluna da linha selecionada
            int idAluno = (int) tblAlunos.getValueAt(linhaSelecionada, 0);

            // Busca o aluno no banco
            AlunoDAO alunoDAO = new AlunoDAO();
            Aluno aluno = alunoDAO.buscaPorId(idAluno);

            if (aluno != null) {
                // Pede confirmação ao usuário
                int confirm = JOptionPane.showConfirmDialog(this, "Deseja realmente excluir este aluno?", "Confirmação", JOptionPane.YES_NO_OPTION);
                if (confirm == JOptionPane.YES_OPTION) {
                    alunoDAO.remove(aluno); // Remove do banco
                    JOptionPane.showMessageDialog(this, "Aluno excluído com sucesso!");
                    atualizarTabela();      // Atualiza a tabela
                    limparCampos();         // Limpa o formulário
                }
            } else {
                JOptionPane.showMessageDialog(this, "Aluno não encontrado.");
            }
        } else {
            JOptionPane.showMessageDialog(this, "Selecione um aluno na tabela para excluir.");
        }

    }//GEN-LAST:event_bntExcluirActionPerformed

    private void bntLimparActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bntLimparActionPerformed
        // TODO add your handling code here:
        limparCampos();
    }//GEN-LAST:event_bntLimparActionPerformed

    private void bntInativarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bntInativarActionPerformed
        // TODO add your handling code here:
        int linhaSelecionada = tblAlunos.getSelectedRow();
        if (linhaSelecionada == -1) {
            JOptionPane.showMessageDialog(this, "Selecione um aluno para inativar.");
            return;
        }
        int idAluno = (int) tblAlunos.getValueAt(linhaSelecionada, 0);

        AlunoDAO alunoDAO = new AlunoDAO();
        Aluno aluno = alunoDAO.buscaPorId(idAluno);
        if (aluno != null) {
            aluno.setAtivo(false);
            alunoDAO.altera(aluno);
            JOptionPane.showMessageDialog(this, "Aluno inativado com sucesso!");
            atualizarTabela();
        } else {
            JOptionPane.showMessageDialog(this, "Aluno não encontrado.");
        }

    }//GEN-LAST:event_bntInativarActionPerformed

    private void bntReativarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bntReativarActionPerformed
        // TODO add your handling code here
        int linhaSelecionada = tblAlunos.getSelectedRow();
        if (linhaSelecionada == -1) {
            JOptionPane.showMessageDialog(this, "Selecione um aluno para reativar.");
            return;
        }
        int idAluno = (int) tblAlunos.getValueAt(linhaSelecionada, 0);

        AlunoDAO alunoDAO = new AlunoDAO();
        Aluno aluno = alunoDAO.buscaPorId(idAluno);
        if (aluno != null) {
            aluno.setAtivo(true);
            alunoDAO.altera(aluno);
            JOptionPane.showMessageDialog(this, "Aluno reativado com sucesso!");
            atualizarTabela();
        } else {
            JOptionPane.showMessageDialog(this, "Aluno não encontrado.");
        }
    }//GEN-LAST:event_bntReativarActionPerformed

    private void txtConsultaAlunoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtConsultaAlunoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtConsultaAlunoActionPerformed

    private void bntConsultarAlunoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bntConsultarAlunoActionPerformed
        // TODO add your handling code here:
        String termo = txtConsultaAluno.getText().trim();
        if (termo.isEmpty()) {
            // Se o campo estiver vazio, atualiza a tabela normalmente
            atualizarTabela();
            return;
        }

        AlunoDAO alunoDAO = new AlunoDAO();
        List<Aluno> lista = alunoDAO.buscarPorNome(termo); // Você deve criar este método!
        atualizarTabelaComLista(lista);

    }//GEN-LAST:event_bntConsultarAlunoActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JanelaAluno.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JanelaAluno.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JanelaAluno.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JanelaAluno.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JanelaAluno().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bntConsultarAluno;
    private javax.swing.JButton bntEditar;
    private javax.swing.JButton bntExcluir;
    private javax.swing.JButton bntInativar;
    private javax.swing.JButton bntLimpar;
    private javax.swing.JButton bntReativar;
    private javax.swing.JButton bntSalvar;
    private javax.swing.JComboBox<String> cbCurso;
    private javax.swing.JCheckBox chkAtivo;
    private javax.swing.JButton jButton6;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblAlunos;
    private javax.swing.JTextField txtConsultaAluno;
    private javax.swing.JTextField txtCpf;
    private javax.swing.JTextField txtDataNascimento;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JTextField txtNome;
    // End of variables declaration//GEN-END:variables
}
